!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).BlurryCheck={})}(this,function(e){"use strict";const t={getFloat32Array:e=>Array.isArray(e)?e.slice(0):new Float32Array(e),createImageData(e,t){const i=(()=>{if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Canvas not available in this environment")})().getContext("2d");if(!i)throw new Error("Could not get 2D context");return i.createImageData(e,t)},luminance(e){const t=this.createImageData(e.width,e.height),i=t.data,n=e.data;for(let e=0;e<n.length;e+=4){const t=.2126*n[e]+.7152*n[e+1]+.0722*n[e+2];i[e]=i[e+1]=i[e+2]=t,i[e+3]=n[e+3]}return t},convolve(e,t,i){const n=Math.round(Math.sqrt(t.length)),a=Math.floor(n/2),o=e.data,r=e.width,s=e.height,l=r,c=s,d=this.createImageData(l,c),h=d.data,g=i?1:0;for(let e=0;e<c;e++)for(let i=0;i<l;i++){const c=4*(e*l+i);let d=0,u=0,f=0,m=0;for(let l=0;l<n;l++)for(let c=0;c<n;c++){const h=4*(Math.min(s-1,Math.max(0,e+l-a))*r+Math.min(r-1,Math.max(0,i+c-a))),g=t[l*n+c];d+=o[h]*g,u+=o[h+1]*g,f+=o[h+2]*g,m+=o[h+3]*g}h[c]=d,h[c+1]=u,h[c+2]=f,h[c+3]=m+g*(255-m)}return d},gaussianBlur(e,t){if((t=Math.abs(t))<=1)return e;const i=t/2,n=Math.ceil(t)+(1-Math.ceil(t)%2),a=this.getFloat32Array(n),o=(i+.5)/3,r=o*o,s=1/Math.sqrt(2*Math.PI*r),l=-1/(2*o*o),c=Math.floor(n/2);let d=0;for(let e=0;e<n;e++){const t=e-c,i=s*Math.exp(t*t*l);Float32Array,a[e]=i,d+=i}for(let e=0;e<a.length;e++)Float32Array,a[e]/=d;const h=this.convolve(e,a,!0);return this.convolve(h,a,!0)}};class i{constructor(e="https://docs.opencv.org/4.5.4/opencv.js"){this.loading=!1,this.loaded=!1,this.openCvUrl=e}static getInstance(e){return i.instance||(i.instance=new i(e)),i.instance}async loadOpenCV(){if("undefined"==typeof window)throw new Error("OpenCV.js can only be loaded in browser environments");if(this.loaded&&window.cv)return Promise.resolve();if(this.loading)return this.waitForLoad();this.loading=!0;try{const e=document.querySelector("#opencv-script");e&&document.body.removeChild(e);const t=document.createElement("script");t.src=this.openCvUrl,t.async=!0,t.id="opencv-script";const i=new Promise((e,i)=>{t.onload=()=>{const t=setInterval(()=>{window.cv&&(clearInterval(t),this.loaded=!0,this.loading=!1,e())},100);setTimeout(()=>{clearInterval(t),this.loading=!1,i(new Error("OpenCV loading timeout"))},1e4)},t.onerror=()=>{this.loading=!1,i(new Error("Failed to load OpenCV"))}});document.body.appendChild(t),await i}catch(e){throw this.loading=!1,e}}async waitForLoad(){return new Promise((e,t)=>{const i=setInterval(()=>{this.loading||(clearInterval(i),this.loaded&&window.cv?e():t(new Error("OpenCV failed to load")))},100);setTimeout(()=>{clearInterval(i),t(new Error("OpenCV loading timeout"))},15e3)})}isLoaded(){return this.loaded&&"undefined"!=typeof window&&!!window.cv}getCV(){if(!this.isLoaded())throw new Error("OpenCV is not loaded. Call loadOpenCV() first.");return window.cv}}class n{constructor(e={}){var t,n,a,o,r,s;this.config={edgeWidthThreshold:null!==(t=e.edgeWidthThreshold)&&void 0!==t?t:.5,laplacianThreshold:null!==(n=e.laplacianThreshold)&&void 0!==n?n:100,method:null!==(a=e.method)&&void 0!==a?a:"edge",openCvUrl:null!==(o=e.openCvUrl)&&void 0!==o?o:"https://docs.opencv.org/4.5.4/opencv.js",canvas:null!==(r=e.canvas)&&void 0!==r?r:this.createCanvas(),debug:null!==(s=e.debug)&&void 0!==s&&s},this.openCvLoader=i.getInstance(this.config.openCvUrl)}createCanvas(){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Canvas not available in this environment")}log(e,...t){this.config.debug&&console.log(`[BlurDetector] ${e}`,...t)}detectEdges(e){const i=t.luminance(e),n=t.getFloat32Array([1,0,-1,2,0,-2,1,0,-1]);return t.convolve(i,n,!0)}reducedPixels(e){const{data:t,width:i}=e,n=4*i,a=[];for(let e=0;e<t.length;e+=n){const o=new Uint8ClampedArray(i);let r=0;for(let i=e;i<e+n;i+=4)o[r]=t[i],r+=1;a.push(o)}return a}detectBlur(e){const t=e[0].length,i=e.length;let n=0,a=0;for(let o=0;o<i;o++){let i=-1;for(let r=0;r<t;r++){const t=e[o][r];if(i>=0&&r>i){const s=e[o][r-1];if(t<s){if(s>=20){n++,a+=r-i-1}i=-1}}0===t&&(i=r)}}if(0===n)return{width:t,height:i,numEdges:0,avgEdgeWidth:0,avgEdgeWidthPerc:0};const o=a/n;return{width:t,height:i,numEdges:n,avgEdgeWidth:o,avgEdgeWidthPerc:o/t*100}}measureBlurByEdges(e){const t=this.detectEdges(e),i=this.reducedPixels(t);return this.detectBlur(i)}async detectBlurrinessWithOpenCV(e){this.openCvLoader.isLoaded()||await this.openCvLoader.loadOpenCV();const t=this.openCvLoader.getCV(),i=t.matFromImageData(e),n=new t.Mat;t.cvtColor(i,n,t.COLOR_RGBA2GRAY,0);const a=new t.Mat;t.Laplacian(n,a,t.CV_64F);const o=new t.Mat,r=new t.Mat;t.meanStdDev(a,o,r);const s=r.data64F[0]**2;return i.delete(),n.delete(),a.delete(),o.delete(),r.delete(),s}async getImageData(e){if(e instanceof ImageData)return e;const t=this.config.canvas,i=t.getContext("2d");if(!i)throw new Error("Could not get 2D context from canvas");if(e instanceof File)return new Promise((n,a)=>{const o=new FileReader;o.onload=e=>{var o;const r=new Image;r.onload=()=>{t.width=r.width,t.height=r.height,i.drawImage(r,0,0),n(i.getImageData(0,0,t.width,t.height))},r.onerror=a,r.src=null===(o=e.target)||void 0===o?void 0:o.result},o.onerror=a,o.readAsDataURL(e)});if(e instanceof HTMLImageElement)return t.width=e.width,t.height=e.height,i.drawImage(e,0,0),i.getImageData(0,0,t.width,t.height);if(e instanceof HTMLCanvasElement){const t=e.getContext("2d");if(!t)throw new Error("Could not get 2D context from source canvas");return t.getImageData(0,0,e.width,e.height)}throw new Error("Unsupported input type")}async analyzeImage(e){this.log("Starting blur analysis with method:",this.config.method);const t=await this.getImageData(e);this.log("Image data obtained:",t.width,"x",t.height);const i={isBlurry:!1,confidence:0,metrics:{},method:this.config.method};try{if("edge"===this.config.method||"both"===this.config.method){const e=this.measureBlurByEdges(t);i.metrics.edgeAnalysis=e;const n=e.avgEdgeWidthPerc>this.config.edgeWidthThreshold,a=e.numEdges<t.width*t.height/1e4,o=n||a;this.log("Edge analysis result:",e,"isBlurry:",n,"lowEdgeCount:",a,"combined:",o),"edge"===this.config.method&&(i.isBlurry=o,i.confidence=Math.min(e.avgEdgeWidthPerc/this.config.edgeWidthThreshold,1))}if("laplacian"===this.config.method||"both"===this.config.method)try{const e=await this.detectBlurrinessWithOpenCV(t);i.metrics.laplacianVariance=e;const n=e<this.config.laplacianThreshold;this.log("Laplacian analysis result:",e,"isBlurry:",n),"laplacian"===this.config.method&&(i.isBlurry=n,i.confidence=Math.min(this.config.laplacianThreshold/e,1))}catch(e){if(this.log("OpenCV analysis failed, falling back to edge detection:",e),"laplacian"===this.config.method){const e=this.measureBlurByEdges(t);i.metrics.edgeAnalysis=e,i.isBlurry=e.avgEdgeWidthPerc>this.config.edgeWidthThreshold,i.confidence=Math.min(e.avgEdgeWidthPerc/this.config.edgeWidthThreshold,1),i.method="edge (fallback)"}}if("both"===this.config.method){const e=!!i.metrics.edgeAnalysis&&i.metrics.edgeAnalysis.avgEdgeWidthPerc>this.config.edgeWidthThreshold,n=!!i.metrics.edgeAnalysis&&i.metrics.edgeAnalysis.numEdges<t.width*t.height/1e4,a=e||n,o=!!i.metrics.laplacianVariance&&i.metrics.laplacianVariance<this.config.laplacianThreshold;i.isBlurry=a||o;const r=i.metrics.edgeAnalysis?Math.min(i.metrics.edgeAnalysis.avgEdgeWidthPerc/this.config.edgeWidthThreshold,1):0,s=i.metrics.laplacianVariance?Math.min(this.config.laplacianThreshold/i.metrics.laplacianVariance,1):0;i.confidence=Math.max(r,s)}return this.log("Final analysis result:",i),i}catch(e){throw this.log("Analysis failed:",e),new Error(`Blur analysis failed: ${e instanceof Error?e.message:"Unknown error"}`)}}async isBlurry(e){return(await this.analyzeImage(e)).isBlurry}}var a=Object.freeze({__proto__:null,BlurDetector:n});class o{constructor(e={}){this.pdfLib=null,this.loading=!1,this.config=e,this.blurDetector=new n(e)}log(e,...t){this.config.debug&&console.log(`[PDFAnalyzer] ${e}`,...t)}async loadPdfJS(){if("undefined"==typeof window)throw new Error("PDF.js can only be loaded in browser environments");if(this.pdfLib)return Promise.resolve();if(this.loading)return this.waitForLoad();this.loading=!0;try{const e=document.querySelector("#pdfjs-script");e&&document.body.removeChild(e);const t=document.createElement("script");t.src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js",t.async=!0,t.id="pdfjs-script";const i=new Promise((e,i)=>{t.onload=()=>{window.pdfjsLib?(window.pdfjsLib.GlobalWorkerOptions.workerSrc="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js",this.pdfLib=window.pdfjsLib,this.loading=!1,e()):(this.loading=!1,i(new Error("PDF.js not available after loading")))},t.onerror=()=>{this.loading=!1,i(new Error("Failed to load PDF.js"))}});document.body.appendChild(t),await i}catch(e){throw this.loading=!1,e}}async waitForLoad(){return new Promise((e,t)=>{const i=setInterval(()=>{this.loading||(clearInterval(i),this.pdfLib?e():t(new Error("PDF.js failed to load")))},100);setTimeout(()=>{clearInterval(i),t(new Error("PDF.js loading timeout"))},15e3)})}async checkPdfPageQuality(e,t){const i=await e.getPage(t),n=[1,1.5,2],o=[];for(const e of n){const n=i.getViewport({scale:e}),r=this.config.canvas||document.createElement("canvas"),s=r.getContext("2d");if(!s)throw new Error("Could not get 2D context from canvas");r.width=n.width,r.height=n.height;const l={canvasContext:s,viewport:n};await i.render(l).promise;const c=s.getImageData(0,0,r.width,r.height),d=new((await Promise.resolve().then(function(){return a})).BlurDetector)({...this.config,edgeWidthThreshold:Math.min(this.config.edgeWidthThreshold||.5,.25),method:"edge",debug:this.config.debug}),h=await d.analyzeImage(c);h.method=`${h.method} (scale ${e}x)`,o.push(h),this.log(`Page ${t} at ${e}x scale:`,h)}const r=o.filter(e=>e.isBlurry).length,s=o.reduce((e,t)=>e+t.confidence,0)/o.length,l=o[o.length-1];return{...l,isBlurry:r>0,confidence:Math.max(s,r/o.length),method:`Multi-scale analysis (${r}/${o.length} scales detected blur)`,metrics:{...l.metrics,scaleResults:o.map(e=>{var t;return{scale:parseFloat((null===(t=e.method.match(/scale ([\d.]+)x/))||void 0===t?void 0:t[1])||"1"),isBlurry:e.isBlurry,confidence:e.confidence,edgeAnalysis:e.metrics.edgeAnalysis}})}}}analyzePageContent(e,t){const i=e.items||[],n=i.map(e=>e.str).join(" ").trim(),a=n.length,o=1===t,r=a<200,s=a/Math.max(i.length,1),l=/bill|statement|invoice|report|summary|account|period/i.test(n),c=/\d{1,2}[-\/]\d{1,2}[-\/]\d{2,4}|\w+ \d{1,2}, \d{4}/i.test(n),d=/\$[\d,]+\.?\d*|USD|EUR|GBP/i.test(n),h=/certificate|certification|certified|diploma|award|achievement|completion|graduate|license|licence|accredited|qualification/i.test(n),g=/hereby|certify|certifies|awarded|granted|presented|conferred|issued|authority|institution|organization/i.test(n),u=h&&g,f=o&&(r||l&&c&&d&&a<500)&&!u;return this.log(`Page ${t} content analysis: textLength=${a}, textDensity=${s.toFixed(1)}, isLikelyHeader=${f}, isCertificate=${u}`),{isLikelyHeaderPage:f,textDensity:s,hasLowTextContent:r,isCertificateDocument:u}}async analyzeTextSharpness(e,t){const i=await e.getPage(t),n=await i.getTextContent();if(0===n.items.length)return{textSharpnessScore:0,isTextBlurry:!0,textMetrics:{reason:"No text found"}};const a=i.getViewport({scale:3}),o=document.createElement("canvas"),r=o.getContext("2d");if(!r)throw new Error("Could not get 2D context for text analysis");o.width=a.width,o.height=a.height;const s={canvasContext:r,viewport:a,intent:"print"};await i.render(s).promise;const l=r.getImageData(0,0,o.width,o.height),c=this.calculateTextSharpness(l,n.items);return this.log(`Page ${t} text sharpness analysis:`,c),c}calculateTextSharpness(e,t){const{data:i,width:n,height:a}=e;let o=0,r=0,s=0;const l=Math.max(1,Math.floor(Math.min(n,a)/100));for(let e=0;e<a-5;e+=l)for(let t=0;t<n-5;t+=l){let a=0,l=0,c=0,d=0;for(let o=0;o<5;o++)for(let r=0;r<5;r++){const s=4*((e+o)*n+(t+r)),h=.299*i[s]+.587*i[s+1]+.114*i[s+2];if(a+=h,l+=h*h,c++,r<4&&o<4){const a=4*((e+o)*n+(t+r+1)),s=4*((e+o+1)*n+(t+r)),l=.299*i[a]+.587*i[a+1]+.114*i[a+2]-h,c=.299*i[s]+.587*i[s+1]+.114*i[s+2]-h,g=Math.sqrt(l*l+c*c);d=Math.max(d,g)}}if(c>0){const e=a/c,t=l/c-e*e;t>100&&(o+=t,s+=d,r++)}}const c=r>0?o/r:0,d=r>0?s/r:0,h=c/1e3+d/50;return{textSharpnessScore:h,isTextBlurry:h<.8,textMetrics:{avgVariance:c,avgEdgeIntensity:d,sampleCount:r,threshold:.8}}}async analyzePDF(e){this.log("Starting PDF analysis for file:",e.name),this.pdfLib||await this.loadPdfJS();try{const t=await e.arrayBuffer(),i=await this.pdfLib.getDocument({data:new Uint8Array(t)}).promise;let n="",a=!1;const o=[];this.log(`PDF has ${i.numPages} pages`);for(let e=1;e<=i.numPages;e++){this.log(`Analyzing page ${e}/${i.numPages}`);const t=await i.getPage(e),r=await t.getTextContent();0===r.items.length&&(a=!0),n+=r.items.map(e=>e.str).join(" ");try{const t=this.analyzePageContent(r,e),n=await this.checkPdfPageQuality(i,e);if(r.items.length>0)try{const a=await this.analyzeTextSharpness(i,e);let r=n.isBlurry||a.isTextBlurry;t.isCertificateDocument?(r=a.textSharpnessScore<.3,this.log(`Page ${e} identified as certificate document - using very lenient blur criteria`)):t.isLikelyHeaderPage&&(r=a.textSharpnessScore<.5,this.log(`Page ${e} identified as likely header/logo page - using lenient blur criteria`));const s={...n,isBlurry:r,confidence:Math.max(n.confidence,a.textSharpnessScore),method:`${n.method} + Text Analysis${t.isCertificateDocument?" (Certificate-adjusted)":t.isLikelyHeaderPage?" (Header-adjusted)":""}`,metrics:{...n.metrics,textSharpness:a,contentAnalysis:t}};o.push(s),this.log(`Page ${e} combined analysis:`,s)}catch(t){this.log(`Text analysis failed for page ${e}:`,t),o.push(n)}else o.push(n)}catch(t){this.log(`Failed to analyze page ${e}:`,t)}}const r=n.length>=10,s=a||!r;this.log(`PDF analysis complete. Scanned: ${s}, Text length: ${n.length}`);let l=!0;if(o.length>0){const e=o.filter(e=>e.isBlurry);if(o.length>1){const e=o.slice(1),t=e.filter(e=>e.isBlurry),i=o[0].isBlurry,n=t.length>0;i&&!n?(this.log("First page marked as blurry but rest are clear - likely false positive due to graphics/logos"),l=!0):l=!(t.length>=Math.ceil(e.length/2)),this.log(`Smart quality check: First page blurry: ${i}, Rest pages blurry: ${t.length}/${e.length}, Final decision: ${l?"Good":"Poor"}`)}else l=0===e.length,this.log(`Single page quality check: ${e.length}/${o.length} pages are blurry`);this.log("PDF type: "+(s?"Scanned":"Text-based"))}const c={isQualityGood:l,isScanned:s,pagesAnalyzed:i.numPages,textLength:n.length,pageResults:o.length>0?o:void 0};return this.log("Final PDF analysis result:",c),c}catch(e){throw this.log("PDF analysis failed:",e),new Error(`PDF analysis failed: ${e instanceof Error?e.message:"Unknown error"}`)}}async isGoodQuality(e){return(await this.analyzePDF(e)).isQualityGood}}class r{constructor(e={}){this.config={edgeWidthThreshold:.5,laplacianThreshold:100,method:"edge",debug:!1,...e},this.blurDetector=new n(this.config),this.pdfAnalyzer=new o(this.config)}async isImageBlurry(e){return this.blurDetector.isBlurry(e)}async analyzeImage(e){return this.blurDetector.analyzeImage(e)}async isPDFGoodQuality(e){return this.pdfAnalyzer.isGoodQuality(e)}async analyzePDF(e){return this.pdfAnalyzer.analyzePDF(e)}async analyzeFile(e,t={}){var i;const a=null===(i=e.name.split(".").pop())||void 0===i?void 0:i.toLowerCase(),r={...this.config,...t};if("pdf"===a){return new o(r).analyzePDF(e)}if(["png","jpg","jpeg","gif","bmp","webp"].includes(a||"")){return new n(r).analyzeImage(e)}throw new Error(`Unsupported file type: ${a}`)}async isFileGoodQuality(e,t={}){const i=await this.analyzeFile(e,t);return"isQualityGood"in i?i.isQualityGood:!i.isBlurry}updateConfig(e){this.config={...this.config,...e},this.blurDetector=new n(this.config),this.pdfAnalyzer=new o(this.config)}getConfig(){return{...this.config}}}e.BlurDetector=n,e.BlurryCheck=r,e.Filters=t,e.OpenCVLoader=i,e.PDFAnalyzer=o,e.analyzeFile=async function(e,t){return new r(t).analyzeFile(e,t)},e.default=r,e.isImageBlurry=async function(e,t){return new r(t).isImageBlurry(e)},e.isPDFGoodQuality=async function(e,t){return new r(t).isPDFGoodQuality(e)},Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=index.umd.js.map
